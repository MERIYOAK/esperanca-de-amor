import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useAuth } from './AuthContext';
import { useToast } from '@/hooks/use-toast';

interface WishlistItem {
  id: string;
  product: {
    id: number;
    name: string;
    price: number;
    originalPrice?: number;
    image: string;
    category: string;
    rating: number;
    isOnSale?: boolean;
    discount?: number;
    stock: number;
  };
  addedAt: Date;
}

interface WishlistContextType {
  wishlistItems: WishlistItem[];
  isLoading: boolean;
  addToWishlist: (product: any) => Promise<void>;
  removeFromWishlist: (itemId: string) => Promise<void>;
  isInWishlist: (productId: number) => boolean;
  clearWishlist: () => Promise<void>;
  refreshWishlist: () => Promise<void>;
}

const WishlistContext = createContext<WishlistContextType | undefined>(undefined);

export const useWishlist = () => {
  const context = useContext(WishlistContext);
  if (context === undefined) {
    throw new Error('useWishlist must be used within a WishlistProvider');
  }
  return context;
};

interface WishlistProviderProps {
  children: ReactNode;
}

export const WishlistProvider: React.FC<WishlistProviderProps> = ({ children }) => {
  const [wishlistItems, setWishlistItems] = useState<WishlistItem[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const { user, token } = useAuth();
  const { toast } = useToast();

  const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';

  // Product ID mapping for demo products to MongoDB ObjectIds
  // This mapping will be updated when we fetch real products from the backend
  const [productIdMapping, setProductIdMapping] = useState<Record<number, string>>({
    // Real product IDs from database (generated by seeding script)
    1: "68894b07c48ce012657b2617", // Fresh Avocados
    2: "68894b07c48ce012657b261a", // Premium Coffee Beans
    3: "68894b07c48ce012657b261d", // Organic Honey
    4: "68894b08c48ce012657b2620", // Fresh Fish Selection
    5: "68894b08c48ce012657b2623", // Local Palm Oil
    6: "68894b08c48ce012657b2626", // Imported Wine
    7: "68894b08c48ce012657b2629", // Fresh Pineapple
    8: "68894b08c48ce012657b262c"  // Imported Cheese
  });

  // Create reverse mapping from MongoDB ObjectIds to frontend numeric IDs
  const getReverseMapping = () => {
    const reverseMapping: Record<string, number> = {};
    Object.entries(productIdMapping).forEach(([frontendId, mongoId]) => {
      reverseMapping[mongoId] = parseInt(frontendId);
    });
    return reverseMapping;
  };

  // Fetch product mapping from backend
  const fetchProductMapping = async () => {
    if (!user || !token) {
      return;
    }

    try {
      const response = await fetch(`${API_BASE_URL}/api/products`);
      if (response.ok) {
        const data = await response.json();
        const mapping: Record<number, string> = {};
        
        // Check if data.data.products exists and is an array
        if (!data.data || !data.data.products || !Array.isArray(data.data.products)) {
          console.error('Invalid products data structure:', data);
          return;
        }
        
        // Create mapping based on product names (since demo products have specific names)
        data.data.products.forEach((product: any, index: number) => {
          if (product && product._id) {
            const demoId = index + 1; // Demo products are numbered 1, 2, 3, etc.
            mapping[demoId] = product._id;
          }
        });
        
        setProductIdMapping(mapping);
      }
    } catch (error) {
      console.error('Error fetching product mapping:', error);
      // Don't throw the error, just log it
    }
  };

  // Demo wishlist data for testing
  const demoWishlistItems: WishlistItem[] = [
    {
      id: '1',
      product: {
        id: 1,
        name: 'Fresh Avocados',
        price: 2500,
        originalPrice: 3000,
        image: 'https://images.unsplash.com/photo-1523049673857-eb18f1d7b578?w=300&h=300&fit=crop',
        category: 'Fresh Fruits',
        rating: 4.8,
        isOnSale: true,
        discount: 17,
        stock: 50
      },
      addedAt: new Date('2024-01-15')
    },
    {
      id: '2',
      product: {
        id: 2,
        name: 'Premium Coffee Beans',
        price: 8500,
        image: 'https://images.unsplash.com/photo-1559056199-641a0ac8b55e?w=300&h=300&fit=crop',
        category: 'Beverages',
        rating: 4.9,
        isOnSale: false,
        stock: 30
      },
      addedAt: new Date('2024-01-14')
    },
    {
      id: '3',
      product: {
        id: 6,
        name: 'Imported Wine',
        price: 12000,
        originalPrice: 15000,
        image: 'https://images.unsplash.com/photo-1506377247377-2a5b3b417ebb?w=300&h=300&fit=crop',
        category: 'Alcoholic Beverages',
        rating: 4.5,
        isOnSale: true,
        discount: 20,
        stock: 15
      },
      addedAt: new Date('2024-01-13')
    }
  ];

  // Fetch wishlist from backend
  const fetchWishlist = async () => {
    if (!user || !token) {
      setWishlistItems([]);
      return;
    }

    try {
      setIsLoading(true);
      const response = await fetch(`${API_BASE_URL}/api/wishlist`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        // Backend returns data.data as the wishlist object, we need data.data.items
        const backendItems = data.data?.items || [];
        
        // Transform backend items to frontend format
        const transformedItems = backendItems.map((item: any) => ({
          id: item._id,
          product: {
            id: item.product._id, // Use the product's _id as id
            name: item.product.name,
            price: item.product.price,
            originalPrice: item.product.originalPrice,
            image: item.product.images?.[0]?.url || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=300&h=300&fit=crop',
            category: item.product.category?.name || 'Unknown Category',
            rating: item.product.rating || 4.5,
            isOnSale: item.product.isOnSale,
            discount: item.product.discount,
            stock: item.product.stock || 0
          },
          addedAt: new Date(item.addedAt)
        }));
        
        setWishlistItems(transformedItems);
      } else {
        setWishlistItems([]);
      }
    } catch (error) {
      console.error('Error fetching wishlist:', error);
      setWishlistItems([]);
    } finally {
      setIsLoading(false);
    }
  };

  // Add item to wishlist
  const addToWishlist = async (product: any) => {
    if (!user || !token) {
      toast({
        title: "Authentication required",
        description: "Please log in to add items to wishlist",
        variant: "destructive",
      });
      return;
    }

    // Check if this is a demo product
    const isDemoProduct = demoWishlistItems.some(item => item.product.id === product.id);
    
    if (isDemoProduct) {
      // Handle demo products locally
      const newItem: WishlistItem = {
        id: `demo-${Date.now()}`,
        product,
        addedAt: new Date()
      };
      
      setWishlistItems(prev => {
        if (!Array.isArray(prev)) {
          return [newItem];
        }
        return [...prev, newItem];
      });
      
      toast({
        title: "Added to wishlist",
        description: "Item has been added to your wishlist",
      });
      return;
    }

    try {
      setIsLoading(true);
      const response = await fetch(`${API_BASE_URL}/api/wishlist/add`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId: product._id || product.id }),
      });

      if (response.ok) {
        const data = await response.json();
        // Backend returns data.data as the wishlist object, we need data.data.items
        const backendItems = data.data?.items || [];
        
        // Transform backend items to frontend format
        const transformedItems = backendItems.map((item: any) => ({
          id: item._id,
          product: {
            id: item.product._id, // Use the product's _id as id
            name: item.product.name,
            price: item.product.price,
            originalPrice: item.product.originalPrice,
            image: item.product.images?.[0]?.url || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=300&h=300&fit=crop',
            category: item.product.category?.name || 'Unknown Category',
            rating: item.product.rating || 4.5,
            isOnSale: item.product.isOnSale,
            discount: item.product.discount,
            stock: item.product.stock || 0
          },
          addedAt: new Date(item.addedAt)
        }));
        
        setWishlistItems(transformedItems);
        toast({
          title: "Added to wishlist",
          description: "Item has been added to your wishlist",
        });
      } else {
        throw new Error('Failed to add item to wishlist');
      }
    } catch (error) {
      console.error('Error adding to wishlist:', error);
      toast({
        title: "Error",
        description: "Failed to add item to wishlist",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Remove item from wishlist
  const removeFromWishlist = async (itemId: string) => {
    if (!user || !token) {
      toast({
        title: "Authentication required",
        description: "Please log in to manage wishlist",
        variant: "destructive",
      });
      return;
    }

    // Handle demo items
    if (itemId.startsWith('demo-')) {
      setWishlistItems(prev => {
        if (!Array.isArray(prev)) {
          return [];
        }
        return prev.filter(item => item.id !== itemId);
      });
      toast({
        title: "Item removed",
        description: "Product has been removed from your wishlist",
      });
      return;
    }

    try {
      setIsLoading(true);
      const response = await fetch(`${API_BASE_URL}/api/wishlist/${itemId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        // Backend returns data.data as the wishlist object, we need data.data.items
        const backendItems = data.data?.items || [];
        
        // Transform backend items to frontend format
        const transformedItems = backendItems.map((item: any) => ({
          id: item._id,
          product: {
            id: item.product._id, // Use the product's _id as id
            name: item.product.name,
            price: item.product.price,
            originalPrice: item.product.originalPrice,
            image: item.product.images?.[0]?.url || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=300&h=300&fit=crop',
            category: item.product.category?.name || 'Unknown Category',
            rating: item.product.rating || 4.5,
            isOnSale: item.product.isOnSale,
            discount: item.product.discount,
            stock: item.product.stock || 0
          },
          addedAt: new Date(item.addedAt)
        }));
        
        setWishlistItems(transformedItems);
        toast({
          title: "Item removed",
          description: "Product has been removed from your wishlist",
        });
      } else {
        throw new Error('Failed to remove item from wishlist');
      }
    } catch (error) {
      console.error('Error removing from wishlist:', error);
      toast({
        title: "Error",
        description: "Failed to remove item from wishlist",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Check if item is in wishlist
  const isInWishlist = (productId: number): boolean => {
    if (!Array.isArray(wishlistItems)) {
      return false;
    }
    return wishlistItems.some(item => item.product.id === productId);
  };

  // Clear wishlist
  const clearWishlist = async () => {
    if (!user || !token) {
      toast({
        title: "Authentication required",
        description: "Please log in to manage wishlist",
        variant: "destructive",
      });
      return;
    }

    // Clear demo items
    setWishlistItems(prev => {
      if (!Array.isArray(prev)) {
        return [];
      }
      return prev.filter(item => !item.id.startsWith('demo-'));
    });

    try {
      setIsLoading(true);
      const response = await fetch(`${API_BASE_URL}/api/wishlist/clear`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        setWishlistItems([]);
        toast({
          title: "Wishlist cleared",
          description: "All items have been removed from your wishlist",
        });
      } else {
        throw new Error('Failed to clear wishlist');
      }
    } catch (error) {
      console.error('Error clearing wishlist:', error);
      toast({
        title: "Error",
        description: "Failed to clear wishlist",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Refresh wishlist
  const refreshWishlist = async () => {
    await fetchWishlist();
  };

  // Fetch wishlist when user changes
  useEffect(() => {
    fetchWishlist();
    // Only fetch product mapping if user is authenticated
    if (user && token) {
      fetchProductMapping(); // Fetch product mapping when component mounts
    }
  }, [user, token]);

  const value: WishlistContextType = {
    wishlistItems,
    isLoading,
    addToWishlist,
    removeFromWishlist,
    isInWishlist,
    clearWishlist,
    refreshWishlist,
  };

  return (
    <WishlistContext.Provider value={value}>
      {children}
    </WishlistContext.Provider>
  );
}; 